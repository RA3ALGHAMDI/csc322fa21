/*JavaScript code*/
function init(){
  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 100);
  camera.position.set(0, 5, 90);
  document.body.appendChild(renderer.domElement);
  renderer.setClearColor("#ffffff");
}


function animate(){
  requestAnimationFrame(animate);
  draw();
  renderer.render(scene, camera); 
}

init(); /*initiate to create new objects*/

const WM = []; /*WM : Washington Monument*/

const vertices = [
 /*the vertices for the 8 sides of the monument 27.5 is 55/2  and 17 is 34/2 */
[ -27.5,   0.0,  27.5,
   27.5,   0.0,  27.5,
   17.0, 500.0,  17.0,
  -17.0, 500.0,  17.0],
[  27.5,   0.0,  27.5,
   27.5,   0.0, -27.5,
   17.0, 500.0, -17.0,
   17.0, 500.0,  17.0],
[  27.5,   0.0, -27.5,
  -27.5,   0.0, -27.5,
  -17.0, 500.0, -17.0,
   17.0, 500.0, -17.0],
[ -27.5,   0.0, -27.5,
  -27.5,   0.0,  27.5,
  -17.0, 500.0,  17.0,
  -17.0, 500.0, -17.0],
    /*the vertices for the 8 tringles at the top of the monument */
[ -17.0, 500.0,  17.0,
   17.0, 500.0,  17.0,
    0.0, 555.0,   0.0],
[  17.0, 500.0,  17.0,
   17.0, 500.0, -17.0,
    0.0, 555.0,   0.0],
[  17.0, 500.0, -17.0,
  -17.0, 500.0, -17.0,
    0.0, 555.0,   0.0],
[ -17.0, 500.0, -17.0,
  -17.0, 500.0,  17.0,
    0.0, 555.0,   0.0],
];
const normals = [
/* the normals for each side of the monument "normal is to describe the orientation at a point on the surface" */
[	0.5, 0.5, 2,
  0.5, 0.5, 2,
  0.5, 0.5, 2,
  0.5, 0.5, 2],
[	2, 0.5, 0.5,
  2, 0.5, 0.5,
  2, 0.5, 0.5,
  2, 0.5, 0.5],
[	0.5, 0.5, -2,
  0.5, 0.5, -2,
  0.5, 0.5, -2,
  0.5, 0.5, -2],
[ -2, 0.5, 0.5,
  -2, 0.5, 0.5,
  -2, 0.5, 0.5,
  -2, 0.5, 0.5],
  /*the normals for the tringle in top of the monument*/
[ 0.5, 1, 2,
  0.5, 1, 2,
  0.5, 1, 2],
[ 2, 1, 0.5,
  2, 1, 0.5,
  2, 1, 0.5],
[ 0.5, 1, -2,
  0.5, 1, -2,
  0.5, 1, -2],
[ -2, 1, 0.5,
  -2, 1, 0.5,
  -2, 1, 0.5],
];
const indices = [
	 /*indecation the sides of the monument*/
[	0, 1, 2,
 	0, 2, 3],
[	0, 1, 2,
 	0, 2, 3],
[	0, 1, 2,
 	0, 2, 3],
[	0, 1, 2,
 	0, 2, 3],
  /*indecation the tringle at the top of the monument*/
[	0, 1, 2],
[	0, 1, 2],
[	0, 1, 2],
[	0, 1, 2],
];
const colors = [
/*setting the colors for each side in the monument*/
[	0.4, 0.6, 0.2,
  0.4, 0.6, 0.2,
  0.4, 0.6, 0.2,
  0.4, 0.6, 0.2],
[ 0.3, 0.3, 0.5,
  0.3, 0.3, 0.5,
  0.3, 0.3, 0.5,
  0.3, 0.3, 0.5],
[ 0.5, 0.6, 0.5,
  0.5, 0.6, 0.5,
  0.5, 0.6, 0.5,
  0.5, 0.6, 0.5],
[ 2, 1, 0.7,
  2, 1, 0.7,
  2, 1, 0.7,
  2, 1, 0.7,],
  /*setiing the colors for the tringle in the top of the monument*/
[ 0.3, 0.3, 0.2,
  0.3, 0.3, 0.2,
  0.3, 0.3, 0.2],
[ 2, 0, 1,
  2, 0, 1,
  2, 0, 1],
[ 0, 2, 4,
  0, 2, 4,
  0, 2, 4],
[ 1, 0.5, 2,
  1, 0.5, 2,
  1, 0.5, 2],
];
for(let r = 0; r < vertices.length; r++){
const geometry = new THREE.BufferGeometry();
geometry.setIndex(indices[r]);
geometry.setAttribute("position", new THREE.Float32BufferAttribute(vertices[r], 3));
geometry.setAttribute("normal", new THREE.Float32BufferAttribute(normals[r], 3));
geometry.setAttribute("color", new THREE.Float32BufferAttribute(colors[r], 3));
  const material = new THREE.MeshPhongMaterial({vertexColors: true});
  const a = new THREE.Mesh(geometry, material);
  WM.push(a);
  scene.add(a);
}
/*white light source*/
const l = new THREE.AmbientLight(0xffffff);
scene.add(l);
/*adjusting the monument to fit the screen*/
for(let r = 0; r < WM.length; r++){
WM[r].position.set(-10, -200, 0);
WM[r].applyMatrix4(new THREE.Matrix4().makeScale(0.10, 0.10, 0.10));
}
draw = function(){
  for(let r = 0; r < WM.length; r++){
  WM[r].applyMatrix4(new THREE.Matrix4().makeRotationY(0.001)); /*the rotation of the monument and the speed of the rotation*/
  }
}
animate();function init(){
  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 100);
  camera.position.set(0, 5, 90);
  document.body.appendChild(renderer.domElement);
  renderer.setClearColor("#ffffff");
}


function animate(){
  requestAnimationFrame(animate);
  draw();
  renderer.render(scene, camera); 
}

init(); /*initiate to create new objects*/

const WM = []; /*WM : Washington Monument*/

const vertices = [
 /*the vertices for the 8 sides of the monument 27.5 is 55/2  and 17 is 34/2 */
[ -27.5,   0.0,  27.5,
   27.5,   0.0,  27.5,
   17.0, 500.0,  17.0,
  -17.0, 500.0,  17.0],
[  27.5,   0.0,  27.5,
   27.5,   0.0, -27.5,
   17.0, 500.0, -17.0,
   17.0, 500.0,  17.0],
[  27.5,   0.0, -27.5,
  -27.5,   0.0, -27.5,
  -17.0, 500.0, -17.0,
   17.0, 500.0, -17.0],
[ -27.5,   0.0, -27.5,
  -27.5,   0.0,  27.5,
  -17.0, 500.0,  17.0,
  -17.0, 500.0, -17.0],
    /*the vertices for the 8 tringles at the top of the monument */
[ -17.0, 500.0,  17.0,
   17.0, 500.0,  17.0,
    0.0, 555.0,   0.0],
[  17.0, 500.0,  17.0,
   17.0, 500.0, -17.0,
    0.0, 555.0,   0.0],
[  17.0, 500.0, -17.0,
  -17.0, 500.0, -17.0,
    0.0, 555.0,   0.0],
[ -17.0, 500.0, -17.0,
  -17.0, 500.0,  17.0,
    0.0, 555.0,   0.0],
];
const normals = [
/* the normals for each side of the monument "normal is to describe the orientation at a point on the surface" */
[	0.5, 0.5, 2,
  0.5, 0.5, 2,
  0.5, 0.5, 2,
  0.5, 0.5, 2],
[	2, 0.5, 0.5,
  2, 0.5, 0.5,
  2, 0.5, 0.5,
  2, 0.5, 0.5],
[	0.5, 0.5, -2,
  0.5, 0.5, -2,
  0.5, 0.5, -2,
  0.5, 0.5, -2],
[ -2, 0.5, 0.5,
  -2, 0.5, 0.5,
  -2, 0.5, 0.5,
  -2, 0.5, 0.5],
  /*the normals for the tringle in top of the monument*/
[ 0.5, 1, 2,
  0.5, 1, 2,
  0.5, 1, 2],
[ 2, 1, 0.5,
  2, 1, 0.5,
  2, 1, 0.5],
[ 0.5, 1, -2,
  0.5, 1, -2,
  0.5, 1, -2],
[ -2, 1, 0.5,
  -2, 1, 0.5,
  -2, 1, 0.5],
];
const indices = [
	 /*indecation the sides of the monument*/
[	0, 1, 2,
 	0, 2, 3],
[	0, 1, 2,
 	0, 2, 3],
[	0, 1, 2,
 	0, 2, 3],
[	0, 1, 2,
 	0, 2, 3],
  /*indecation the tringle at the top of the monument*/
[	0, 1, 2],
[	0, 1, 2],
[	0, 1, 2],
[	0, 1, 2],
];
const colors = [
/*setting the colors for each side in the monument*/
[	0.4, 0.6, 0.2,
  0.4, 0.6, 0.2,
  0.4, 0.6, 0.2,
  0.4, 0.6, 0.2],
[ 0.3, 0.3, 0.5,
  0.3, 0.3, 0.5,
  0.3, 0.3, 0.5,
  0.3, 0.3, 0.5],
[ 0.5, 0.6, 0.5,
  0.5, 0.6, 0.5,
  0.5, 0.6, 0.5,
  0.5, 0.6, 0.5],
[ 2, 1, 0.7,
  2, 1, 0.7,
  2, 1, 0.7,
  2, 1, 0.7,],
  /*setiing the colors for the tringle in the top of the monument*/
[ 0.3, 0.3, 0.2,
  0.3, 0.3, 0.2,
  0.3, 0.3, 0.2],
[ 2, 0, 1,
  2, 0, 1,
  2, 0, 1],
[ 0, 2, 4,
  0, 2, 4,
  0, 2, 4],
[ 1, 0.5, 2,
  1, 0.5, 2,
  1, 0.5, 2],
];
for(let r = 0; r < vertices.length; r++){
const geometry = new THREE.BufferGeometry();
geometry.setIndex(indices[r]);
geometry.setAttribute("position", new THREE.Float32BufferAttribute(vertices[r], 3));
geometry.setAttribute("normal", new THREE.Float32BufferAttribute(normals[r], 3));
geometry.setAttribute("color", new THREE.Float32BufferAttribute(colors[r], 3));
  const material = new THREE.MeshPhongMaterial({vertexColors: true});
  const a = new THREE.Mesh(geometry, material);
  WM.push(a);
  scene.add(a);
}
/*white light source*/
const l = new THREE.AmbientLight(0xffffff);
scene.add(l);
/*adjusting the monument to fit the screen*/
for(let r = 0; r < WM.length; r++){
WM[r].position.set(-10, -200, 0);
WM[r].applyMatrix4(new THREE.Matrix4().makeScale(0.10, 0.10, 0.10));
}
draw = function(){
  for(let r = 0; r < WM.length; r++){
  WM[r].applyMatrix4(new THREE.Matrix4().makeRotationY(0.001)); /*the rotation of the monument and the speed of the rotation*/
  }
}
animate();
